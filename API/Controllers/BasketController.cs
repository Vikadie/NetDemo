using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using API.Data;
using API.DTOs;
using API.Entities;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace API.Controllers
{
    public class BasketController : BaseApiController
    {
        private readonly StoreContext _context;

        public BasketController(StoreContext context)
        {
            _context = context;
        }

        // fetch individual item
        [HttpGet(Name = "GetBasket")]
        public async Task<ActionResult<BasketDto>> GetBasket()
        {
            // it will create a ByuerId sent as cookie
            var basket = await RetrieveBasket();

            if (basket == null) return NotFound();
            return MapBasketToDto(basket);
        }

        // add a product to the basket
        [HttpPost] // example : api/basket?productId=...&quantity=...
        public async Task<ActionResult> AddItemToBasket(int productId, int quantity)
        {
            // get basket || if not basket for current user => create a basket
            var basket = await RetrieveBasket();

            if (basket == null)
            {
                basket = CreateBasket();
            }
            // get product bu productId
            var product = await _context.Products.FindAsync(productId);
            if (product == null) return NotFound();
            // add item
            basket.AddItem(product, quantity);
            // save changes
            var result = await _context.SaveChangesAsync(); // returns an int with number of changes in the DB
            if (result > 0) return CreatedAtRoute("GetBasket", MapBasketToDto(basket)); 
            // CreatedAtRoute is the correct way to return with Status 201 (with correct location("GetBasket"), and the created/updated basket)

            return BadRequest(new ProblemDetails { Title = "Problem saving item to basket" });
        }

        // delete a product
        [HttpDelete]
        public async Task<ActionResult> RemoveBasketItem(int productId, int quantity)
        {
            // get basket
            var basket = await RetrieveBasket();

            if (basket == null) return NotFound();
            // remove item or reduce quantity
            basket.RemoveItem(productId, quantity);
            // save changes
            var result = await _context.SaveChangesAsync(); // returns an int with number of changes in the DB
            if (result > 0) return Ok();

            return BadRequest(new ProblemDetails { Title = "Problem removing an item from basket" });
        }

        private Basket CreateBasket()
        {
            // BuyerId is randomly generated - globally unique id (GUID)
            var buyerId = Guid.NewGuid().ToString();
            // cookie options creation
            var cookieOptions = new CookieOptions
            {
                IsEssential = true, // without this cookie, our software can not operate
                Expires = DateTime.Now.AddDays(30),
            };
            // adding cookie to the response
            Response.Cookies.Append("buyerId", buyerId, cookieOptions);

            // basket creation
            var basket = new Basket { BuyerId = buyerId }; // Id will be generated by EntityFramework, the List of ITems will be initialized to empty list

            _context.Baskets.Add(basket); //write it to the DB (via context)

            return basket;
        }

        private async Task<Basket> RetrieveBasket()
        {
            return await _context.Baskets // the Baskets table is added to the context in the StoreContext.cs
                .Include(i => i.Items) // if there are Items inside, include them
                .ThenInclude(p => p.Product) // along with the respective product info
                .FirstOrDefaultAsync(x => x.BuyerId == Request.Cookies["buyerId"]); // search by the cookie, if not a basket returns Null as Default value
        }
        private BasketDto MapBasketToDto(Basket basket)
        {
            return new BasketDto
            {
                Id = basket.Id,
                BuyerId = basket.BuyerId,
                Items = basket.Items.Select(item => new BasketItemDto
                {
                    ProductId = item.ProductId,
                    Name = item.Product.Name,
                    Brand = item.Product.Brand,
                    Type = item.Product.Type,
                    Price = item.Product.Price,
                    PictureUrl = item.Product.PictureUrl,
                    Quantity = item.Quantity
                }).ToList()
            };
        }
    }
}